" Default settings
set nocompatible  " be iMproved, required
filetype off      " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required

Plugin 'VundleVim/Vundle.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'scrooloose/nerdtree'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'isruslan/vim-es6'
Plugin 'othree/html5.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'majutsushi/tagbar'
Plugin 'fatih/vim-go'
Plugin 'powerline/powerline'
Plugin 'chiel92/vim-autoformat'
Plugin 'mhartington/oceanic-next'
Plugin 'rakr/vim-one'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'hashivim/vim-terraform'
Plugin 'hashivim/vim-vagrant'
Plugin 'hashivim/vim-consul'
Plugin 'hashivim/vim-packer'
Plugin 'hashivim/vim-nomadproject'
Plugin 'tpope/vim-fugitive'
Plugin 'plytophogy/vim-virtualenv'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'nvie/vim-flake8'
Plugin 'kien/ctrlp.vim'
Plugin 'google/yapf', { 'rtp': 'plugins/vim'  }
Plugin 'mattn/emmet-vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'lilydjwg/colorizer'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'w0rp/ale'
Plugin 'blindFS/vim-taskwarrior'

" Bundle 'valloric/youcompleteme'
" Plugin 'airblade/vim-gitgutter'
" Plugin 'vim-syntastic/syntastic'
" Plugin 'ramele/agrep'
" Plugin 'maralla/completor.vim'
" Plugin 'nikvdp/ejs-syntax'
" Plugin 'tomtom/tcomment_vim'
" Plugin 'mxw/vim-jsx'
" Plugin 'shougo/vimshell.vim'
" Plugin 'shougo/vimproc.vim'
" Plugin 'leafgarland/typescript-vim'
" Plugin 'chriskempson/base16-vim'
" Plugin 'morhetz/gruvbox'
" Plugin 'tpope/vim-commentary'
" Plugin 'yggdroot/indentline'
" Plugin 'dracula/vim'
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'godlygeek/tabular'
" Plugin 'plasticboy/vim-markdown'
" All of your Plugins must be added before the following line

call vundle#end()   " required for vundle to work

colorscheme Tomorrow-Night

language en_US.UTF-8
syntax enable
filetype plugin indent on

set title                                     " Window title
set cf                                        " Enable error files & error jumping
set t_Co=256                                  " Terminal colors
set encoding=utf-8                            " File encoding
set history=256                               " Number of operations to remember in history
set autowrite                                 " Writes on make/shell commands
set clipboard+=unnamed                        " Access the system keyboard
set termencoding=utf-8                        " Terminal encoding
set fillchars+=stl:\ ,stlnc:\                 " Filling characters
set ttymouse=urxvt                            " Tty mouse
set nowrap                                    " Line wrapping off
set mouse=a                                   " Mouse in all modes
set number                                    " Print lines number
set autochdir                                 " Change vim directory when opening files
set backspace=indent,eol,start                " Indentation on new line
set cindent                                   " Indentation setup
set cinwords=if,else,while,do,for,switch,case " Keyword that start extra indentation
set tabstop=2                                 " Tabulation is 2 spaces
set softtabstop=2                             " Default tab stop is 2 spaces
set noexpandtab                               " Default tab noexpand
set shiftwidth=2                              " How many columns to reindent
set foldmethod=syntax                         " Folding method
set foldlevel=99                              " Folding max level
set background=dark                           " Window background
set novisualbell                              " No blinking .
set noerrorbells                              " No noise.
set laststatus=2                              " Always show status line.
set backup                                    " Enable creation of backup file.
set backupdir=~/.vim/backups                  " Where backups will go.
set directory=~/.vim/tmp                      " Where temporary files will go.
set term=rxvt-unicode-256color

if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    " render properly when inside 256-color tmux and GNU screen.
    " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
endif

set guifont=Source\ Code\ Pro\ Medium:h13
if has('gui_running')
    set guifont=Source\ Code\ Pro\ Medium:h14
endif

highlight BadWhitespace ctermbg=red guibg=red

" for html/rb files, 2 spaces
autocmd Filetype html set tw=120 ts=2 sw=2 expandtab
autocmd Filetype ruby set tw=120 ts=2 sw=2 expandtab

" for js/coffee/jade/python/go files, 4 spaces
autocmd Filetype javascript set tw=120 ts=4 sw=4 sts=0 expandtab
autocmd Filetype go set tw=120 ts=4 sw=4 sts=0 expandtab
autocmd Filetype coffeescript set tw=120 ts=4 sw=4 sts=0 expandtab
autocmd Filetype jade set tw=120 ts=4 sw=4 sts=0 expandtab
autocmd Filetype python set tw=79 ts=4 sw=4 sts=0 autoindent expandtab fileformat=unix

" for makefile, keep tabulations
autocmd Filetype make set ts=4 sw=4 sts=4 noexpandtab

" for mutt mail messages
au BufRead /tmp/mutt-* set tw=72

" change directory silently when opening files
autocmd BufEnter * silent! lcd %:p:h

let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" javascript syntax
" auto pairs
let g:javascript_plugin_flow = 1
let g:AutoPairs={'(':')', '[':']', '{':'}',"'":"'",'"':'"'}

" vertical line indentation
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = '│'
let g:go_version_warning = 0

" async status
let g:asyncrun_status = "idle"
let g:asyncrun_last = 1

" powerline
let g:airline_powerline_fonts = 1

" airline
let g:airline_theme='bubblegum'
let g:airline_detect_modified=1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#vcs_priority = ["git", "mercurial"]

let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])

" try change whitespace
let g:airline_symbols.linenr = 'Ξ'
let g:airline_symbols.whitespace = '⣿'
let g:airline_symbols.maxlinenr = ''

" simply fold
let g:SimpylFold_docstring_preview=1

" Agrep
let agrep_win_sp_mod = 'botright vert'

" Completion setup
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" syntastic settings
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
" let g:syntastic_python_checkers = ['flake8', 'pep8']

" ale settings
let g:ale_completion_enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" NerdTREE
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" taskwarrior settings
let g:task_info_size = 20
let g:task_info_vsplit = 0
" let g:task_info_position='bottom'

" python
let python_highlight_all=1
let g:virtualenv_directory = '~/.virtualenvs'
let g:virtualenv_auto_activate=1

" python sort imports
autocmd FileType python nnoremap <LocalLeader>i :!isort %<CR><CR>

" python format
" autocmd FileType python map <C-Y> :call yapf#YAPF()<cr>
" autocmd FileType python imap <C-Y> <c-o>:call yapf#YAPF()<cr>

augroup vimrc
	autocmd QuickFixCmdPost * botright copen 16
    " autocmd User AsyncRunStart call asyncrun#quickfix_toggle(16, 1)
augroup END

" use asyncrun for vim-fugitive
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>

" F2 to toggle nerdtree
nnoremap <F2> :NERDTreeToggle<CR>

" F3 to format files
autocmd FileType go			map <buffer> <F3> :GoFmt<CR>
autocmd FileType python	map <buffer> <F3> :YAPF<CR>

" F4 to call linters
autocmd FileType go			map <buffer> <F4> :GoLint<CR>
autocmd FileType python	map <buffer> <F4> :call Flake8()<CR>

" F5 to toggle build and run
nnoremap <F5> :call <SID>compile_and_run()<CR>

" F6 to navigate buffers
nnoremap <F6> :buffers<CR>:buffer<Space>

" F7 to get taskwarrior tasks
nnoremap <F7> :TW list<CR>

" F8 to toggle tagbar
nnoremap <F8> :TagbarToggle<CR>

" F9 to toggle quickfix window
nnoremap <F9> :call asyncrun#quickfix_toggle(16)<cr>

" Change window
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Change buffer
nnoremap <C-B>n :bn<CR>
nnoremap <C-B>p :bp<CR>
nnoremap <C-B>d :bd<CR>
nnoremap <C-B>c :bp\|bd #<CR>

" Use space to fold and unfold code
nnoremap <space> za

" Search current selection by typing //
vnoremap // y/\V<C-R>"<CR>

" Completor
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-m>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

" Special syntax - extension mapping
au BufNewFile,BufRead *.conf setlocal ft=sh

" Match bad whitespaces for all languages
au BufRead,BufNewFile * match BadWhitespace /\s\+$/

" Quit vim if NerdTree is the last buffer
au BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Function to compile_and_run using async
function! s:compile_and_run()
    exec 'w'
    if &filetype == 'c'
        exec "AsyncRun! gcc '%' -o '%<'; time './%<'"
    elseif &filetype == 'cpp'
       exec "AsyncRun! g++ -std=c++11 '%' -o '%<'; time './%<'"
    elseif &filetype == 'java'
       exec "AsyncRun! javac '%'; time java '%<'"
    elseif &filetype == 'sh'
       exec "AsyncRun! time bash '%'"
    elseif &filetype == 'python'
       exec "AsyncRun! time python '%'"
    elseif &filetype == 'Makefile'
       exec "AsyncRun! time make -f '%'"
	elseif &filetype == 'Dockerfile'
       exec "AsyncRun! time docker build -f '%'"
	elseif &filetype == 'go'
       exec "AsyncRun! time go build '%:p:h'"
	endif
endfunction
